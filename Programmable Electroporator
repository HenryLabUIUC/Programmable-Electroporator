/**************"Advanced Programmable Electroporation Sketch"*****************
 * This sketch programs and delivers a chain of from 1 up to 255 electrical pulses for electroporating eggs and embryos.  Sketch developed by Dr. Jonathan Henry - UIUC. Parts of this code are adapted
 * from the "Interrupt-based Rotary Encoder Menu Sketch" by Simon Merrett, based on insight from Oleg Mazurov, Nick Gammon, rt and Steve Spence, and button debouncing code from Nick Gammon. 
 * Earlier I had made program adjustments by trying to change values from byte to int to store larger values than 255; but this created problems from the posibility of generating negative numbers 
 * and this can cause the program to crash from time to time (though this could be fixed with additional code). So here I left programming values as bytes (0-255) values. This present version works
 * well and uses the menu system to program and fire the pulses. I added a serial LCD display connected to tx pin 1, but one could refine the code for better LCD display on two lines -- In addition,
 * one should eventually convert this to use software serial to avoid problems in disrupting the on-board LCD display settings while programming the Uno. Otherwise you must physically disconnect the
 * tx line to the LCD everytime you reprogram the Uno. This verison saves values as setting1 (pulse duration), setting2 (no. of pulses), and setting3 (pulse interval) permanantly to eeprom bytes 1-3,
 * respectively, and recalls those saved values after power is restored or the Uno is reset. Note that you can only write to those eeprom bytes 100,000 times. Here we use only 3 of the 1000 bytes 
 * available. Since programming values are in bytes (values of 0-255), they are multipled by 5 for displaying and using setting1 and setting3, when those are converted to msec for the delays (pulse 
 * duration and pulse interval). This means in practice, that those converted values will increment by 5's when the rotary dial is turned to increment each byte value by 1. Therefore, actual pulse
 * durations and pulse intervals can be set from 5 msec to 1275 msec in 5 msec increments. The actual values are varified on the LCD when they are entered. This version adds a way to bypass the 
 * firecommand() by setting the encoder knob to 0 once in Mode 4. Uses pin 1 (tx) to connect to LCD; pin 8 to connect to the solid state relay; pin 2 and pin 3 to connect to the rotary encoder output; 
 * and pin 4 to connect to the N.O. momentary push button switch in the encoder. One could add a calibration equation to calculate the proper delays for the pulses, etc., depending on how 
 * accurate the Ardunio Uno timer is, but this is already very accurate so probably not needed, and yes, I did varify this to be good with an oscilloscope. See Fritzing diagram for wiring.
 * Note that the Adafruit Serial Blackpack LCD display we are using has its own on-board memmory and one should preset the contrast, as well as the brighness and color of the display backlight, in
 * addition to storing a start-up splash screen to personalize the device.  Those particular settings are done using another Arduino script (contact J. J. Henry for details, j-henry4@illinois.edu).
 * J.J.(Q.) Henry: UIUC - 2/7/2019; For detailed information on the construction of this electroporator, see http://www.life.illinois.edu/henry/electroporation.html. Inspired by the original "Zeller Zapper" Dr. Robert Zeller - SDSU.
 */
#include <EEPROM.h>
// Rotary encoder declarations
static int pinA = 2; // first hardware interrupt pin is digital pin 2
static int pinB = 3; // second hardware interrupt pin is digital pin 3
volatile byte aFlag = 0; // let's us know when we're expecting a rising edge on pinA to signal that the encoder has arrived at a detent
volatile byte bFlag = 0; // let's us know when we're expecting a rising edge on pinB to signal that the encoder has arrived at a detent (opposite direction to when aFlag is set)
volatile byte encoderPos = 0; //this variable stores our current value of encoder position. Change to int or uin16_t instead of byte if you want to record a larger range than 0-255
//but if you exceed 255 as a byte there is a problem need to figure this out. need to make this an int, and the values can then go negative.
volatile byte oldEncPos = 0; //stores the last encoder position value so we can compare to the current reading and see if it has changed (so we know when to print to the serial monitor). Changed this it was a byte
volatile byte reading = 0; //somewhere to store the direct values we read from our interrupt pins before checking to see if we have moved a whole detent. Changed this it was a byte
// Button reading section, including debounce without delay function declarations
const byte buttonPin = 4; // this is the Arduino pin we are connecting the push button to
byte oldButtonState = HIGH;  // assume switch open because of pull-up resistor
const unsigned long debounceTime = 10;  // milliseconds
unsigned long buttonPressTime;  // when the switch last changed state
boolean buttonPressed = 0; // a flag variable
// Menu and submenu/setting declarations
byte Mode = 0;   // This is which menu mode we are in at any given time (top level or one of the submenus)
const byte modeMax = 4; // This is the number of submenus/settings you want
byte setting1 = 0;  // a variable which holds the value we set, changed from byte to int for values over 255.see also notes below, used for pulse duration
byte setting2 = 0;  // a variable which holds the value we set, changed from byte to int for values over 255.see also notes below, used for pulse number
byte setting3 = 0;  // a variable which holds the value we set, changed from byte to int for values over 255.see also notes below, used for time interval between pulses
byte setting4 = 0;  // a variable which holds the value we set, changed from byte to int for values over 255.see also notes below, used for triggering a train of pulses
/* Note: you could change settingN above, etc to int, float or boolean to suit your application. But Beware! See notes above.
 Remember to change "void setAdmin(byte name,*BYTE* setting)" to match int, float, boolean, etc., and probably add some 
 "modeMax"-type overflow code in the "if(Mode == N && buttonPressed)" section*/

//counter used to keep track of the pulses delivered
int counter = 0;          //counter variable for number of pulses
int setting11 = 0;//the adjusted variable for the firecommand: to approximate the actual pulse duration (msec)
int setting33 = 0;//the adjusated variable for the firecommand: to approximate the actual pulse interval (msec)

void setup() {
  // initialize the LED pin as an output: This can be changed, see below:
pinMode(8, OUTPUT);//pin used to trigger the solid state relay to deliver the electroporation pulses. Warning, I noticed this pin can go high at odd times during start-up, so maybe best to use another pin?
digitalWrite(8, LOW);//start with this pin off.  Note that upon startup I saw the LED on pin 13 flash a few times.  This is not good. So I changed this to 8.

  //Rotary encoder section of setup
  pinMode(pinA, INPUT_PULLUP); // set pinA as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  pinMode(pinB, INPUT_PULLUP); // set pinB as an input, pulled HIGH to the logic voltage (5V or 3.3V for most cases)
  attachInterrupt(0,PinA,RISING); // set an interrupt on PinA, looking for a rising edge signal and executing the "PinA" Interrupt Service Routine (below)
  attachInterrupt(1,PinB,RISING); // set an interrupt on PinB, looking for a rising edge signal and executing the "PinB" Interrupt Service Routine (below)
  
  // button section of setup
pinMode (buttonPin, INPUT_PULLUP); // setup the button pin

// read and set the states of the stored encoder values from memory:
setting1 = EEPROM.read(1);
setting2 = EEPROM.read(2);
setting3 = EEPROM.read(3);



  Serial.begin(9600);//opens serial port, sets data rate to 9600 bps
  //Serial.write(0xFE);
  //Serial.write(0x52);//turn autoscroll off new text should appear on next line, and old text will scroll up
  //delay(10);//always need this delay to execute the lcd programming command above

  Serial.write(0xFE);//needed to tell the LCD a command is comming
  Serial.write(0x51);//turn autoscroll on new text should appear on first line, I think you only need to run this code once to set LCD eeprom
  delay(10);//always need this delay to execute the lcd programming command above
  Serial.println("Main Menu");//lets get things started!
}

void loop() {

   rotaryMenu();
   
   counter = 0;// reset the counter each time you go thru the loop, or you can't retrigger a train of pulses

}

void rotaryMenu() { //This handles the bulk of the menu functions without needing to install/include/compile a menu library
  //Rotary encoder update display if turned
  if(oldEncPos != encoderPos) {// DEBUGGING
    Serial.println(encoderPos);// DEBUGGING. Sometimes the serial monitor may show a value just outside modeMax due to this function. The menu shouldn't be affected.
    oldEncPos = encoderPos;// DEBUGGING
  }
  // Button reading with non-delay() debounce - thank you Nick Gammon!
  byte buttonState = digitalRead (buttonPin); 
  if (buttonState != oldButtonState){
    if (millis () - buttonPressTime >= debounceTime){ // debounce
      buttonPressTime = millis ();  // when we closed the switch 
      oldButtonState =  buttonState;  // remember for next time 
      if (buttonState == LOW){
        //Serial.println ("Button closed"); // DEBUGGING: print that button has been closed
        buttonPressed = 1;
      }
      else {
        //Serial.println ("Button opened"); // DEBUGGING: print that button has been opened
        buttonPressed = 0;  
      }  
    }  // end if debounce time up
  } // end of state change

  //Main menu section
  if (Mode == 0)
  {
    if (encoderPos > (modeMax+10)) encoderPos = modeMax; // check we haven't gone out of bounds below 0 and correct if we have
    else if (encoderPos > modeMax) encoderPos = 0; // check we haven't gone out of bounds above modeMax and correct if we have
    
    if (buttonPressed){ 
      Mode = encoderPos; // set the Mode to the current value of input if button has been pressed
      //Serial.print("Mode selected: "); //DEBUGGING: print which mode has been selected
      //Serial.println(Mode); //DEBUGGING: print which mode has been selected
      buttonPressed = 0; // reset the button status so one press results in one action
      if (Mode == 1) {
        Serial.write(0xFE);//needed to tell the LCD a command is coming
        Serial.write(0x48);//sets cursor to home position
        delay(10);
        Serial.print("Duration = ");
        delay(20);
        encoderPos = setting1; // start adjusting Vout from last set point
      }
      if (Mode == 2) {
        Serial.write(0xFE);
        Serial.write(0x48);
        delay(10);
        Serial.print("# Pulses = ");
        delay(20);
        encoderPos = setting2; // start adjusting Imax from last set point
      }
      if (Mode == 3) {
        Serial.write(0xFE);
        Serial.write(0x48);
        delay(10);
        Serial.print("Interval = ");
        delay(20);
        encoderPos = setting3; // start adjusting Vmin from last set point
      }
      if (Mode == 4) {
        Serial.write(0xFE);
        Serial.write(0x48);
        delay(10);
        Serial.print("Push to Fire!");       
        delay(200);
      }
      if (Mode == 0) {
        Serial.println("Main Menu");
        delay(200);
      }
    }
  }
  if (Mode == 1 && buttonPressed) {
    if (encoderPos == 0) {
      return;//nothing happens and this prevents a value of 0 from being entered
    }
    setting1 = encoderPos; // record whatever value your encoder has been turned to, to setting 3
    delay(20);
    EEPROM.update(1, setting1);// save/update the reading only if it has changed.
    delay(20);
      // save the reading.
    setAdmin(1,setting1);
    
    //code to do other things with setting1 here, perhaps update display  
  }
  if (Mode == 2 && buttonPressed) {
    if (encoderPos == 0) {
      return;//nothing happens and this prevents a value of 0 from being entered
    }
      setting2 = encoderPos; // record whatever value your encoder has been turned to, to setting 2
    delay(20);
    EEPROM.update(2, setting2);// save/update the reading only if it has changed.
    delay(20);
     // save the reading.
    setAdmin(2,setting2);
    
    //code to do other things with setting2 here, perhaps update display   
  }
  if (Mode == 3 && buttonPressed){
    if (encoderPos == 0) {
      return;//nthing happens and this prevents a value of 0 from being entered
    }
    setting3 = encoderPos; // record whatever value your encoder has been turned to, to setting 3
    delay(20);
    EEPROM.update(3, setting3);// save/update the reading only if it has changed.
    delay(20);
      // save the reading.
    setAdmin(3,setting3);

    //code to do other things with setting3 here, perhaps update display 
  }
   if (Mode == 4 && buttonPressed){
    setting4 = encoderPos; // record whatever value your encoder has been turned to, to setting 4; if the knob is not turned the valiue will be 4
    setAdmin(4,setting4);
    firecommand();//calls the firecommand subroutine to trigger a train of pulses
    counter == 0;
    if (setting4 == 0) {
    Serial.println("Not Zapped!");//if one sets the encoder position to 0 then no pulses will have been fired, see firecommand() subroutine, below
    }
    else {
    Serial.println("Zapped!");//Otherwise the pulses will have been fired!
    }
    delay(1000);
        //sei(); //restart interrupts//putting this here may cause a problem? Was added here because we stopped interupts in the Firecammand subroutine
        //Had problems with the above line so commented it out for now

    //code to do other things with setting4 here 
  }
 
} 

// Carry out common activities each time a setting is changed
void setAdmin(byte name, byte setting){//can change from "byte setting" to "int setting" for numbers over 255, but beware! See notes above.
  
  //Serial.print("Setting ");
  //Serial.print(name);
  if (name == 0) {
    Serial.println("Main menu");
    delay(400);
  }
    else if (name == 1) {
    Serial.print("Duration");
    Serial.print(" = ");
  Serial.println(setting*5);
   //delay(1000);
           Serial.write(0xFE);
           Serial.write(0xc0);
           delay(10);
   Serial.print(" (msec)");
   delay(1000);
   Serial.println();
  encoderPos = 0; // reorientate the menu index - optional as we have overflow check code elsewhere
  buttonPressed = 0; // reset the button status so one press results in one action
  Mode = 0; // go back to top level of menu, now that we've set values
    }
    else if (name == 2) {
      Serial.print("Number");
      Serial.print(" = ");
  Serial.println(setting);
   delay(1000);
  encoderPos = 0; // reorientate the menu index - optional as we have overflow check code elsewhere
  buttonPressed = 0; // reset the button status so one press results in one action
  Mode = 0; // go back to top level of menu, now that we've set values
    }
    else if (name == 3) {
      Serial.print("Interval");
      Serial.print(" = ");
  Serial.println(setting*5);
     //delay(800);
     Serial.write(0xFE);
     Serial.write(0xc0);
     delay(10);
     Serial.print(" (msec)");
      delay(1000);
      Serial.println();
  encoderPos = 0; // reorientate the menu index - optional as we have overflow check code elsewhere
  buttonPressed = 0; // reset the button status so one press results in one action
  Mode = 0; // go back to top level of menu, now that we've set values
      }
    else if (name == 4) {
      Serial.println();
      //Serial.println("Fire Command");
      //delay(400);
      //Serial.print(" = "); //DEBUGGING
  //Serial.println(setting);//DEBUGGING
  encoderPos = 0; // reorientate the menu index - optional as we have overflow check code elsewhere
  buttonPressed = 0; // reset the button status so one press results in one action
  Mode = 0; // go back to top level of menu, now that we've set values
    } 
     //I don;'t think we need this stuff below again here since I copied it indivdually into each of the 3 modes listed above? jjh
  //Serial.print(" = "); //DEBUGGING
  //Serial.println(setting);//DEBUGGING
  //encoderPos = 0; // reorientate the menu index - optional as we have overflow check code elsewhere
  //buttonPressed = 0; // reset the button status so one press results in one action
  //Mode = 0; // go back to top level of menu, now that we've set values
  //Serial.println("Select SubMenu #)"); //DEBUGGING
}

//Rotary encoder interrupt service routine for one encoder pin
void PinA(){
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; // read all eight pin values then strip away all but pinA and pinB's values
  if(reading == B00001100 && aFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos --; //decrement the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00000100) bFlag = 1; //signal that we're expecting pinB to signal the transition to detent from free rotation
  sei(); //restart interrupts
}

//Rotary encoder interrupt service routine for the other encoder pin
void PinB(){
  cli(); //stop interrupts happening before we read pin values
  reading = PIND & 0xC; //read all eight pin values then strip away all but pinA and pinB's values
  if (reading == B00001100 && bFlag) { //check that we have both pins at detent (HIGH) and that we are expecting detent on this pin's rising edge
    encoderPos ++; //increment the encoder's position count
    bFlag = 0; //reset flags for the next turn
    aFlag = 0; //reset flags for the next turn
  }
  else if (reading == B00001000) aFlag = 1; //signal that we're expecting pinA to signal the transition to detent from free rotation
  sei(); //restart interrupts
}
void firecommand(){//sub-routine to trigger a set train of pulses using the data entered through each sub-menu, actived in Mode 4
  //note having interrupts active may effect the delay timing function
    //cli(); //stop interrupts happening before we read pin values.  Had problems with this here so commented it out for now.
while (counter < (setting2) && (setting4) != 0) {//counter starts at 0, when the total number of set pulses is delivered, the sub-routine is completed
    //add the second condition, above, as a way to exit Mode 4, so if encoderPos is set to 0 and the button is pressed, no pulses will be fired! and we exit the while loop!
    setting11 =(setting1*5);//for timing it may be better to do the calculation before calling the delays below, adjust multiplication factor, as needed
    setting33=(setting3*5);//for timing it may be better to do the calculation before calling the delays below, adjust multiplication factor, as needed
  digitalWrite(8, HIGH);
  //delay(setting1*5);//the duration of a single pulse, multiplied by 5msec, adjust as needed
  //delays are approx. in msec
  delay(setting11);//the duration of a single pulse, multiplied by 5msec
  digitalWrite(8, LOW);
  //delay(setting3*5);// resting interval between pulses, multiplied by 5 msec, adjust as needed
  //delays are approx. in msec
  delay(setting33);//the duration of the resting interval between pulses, multiplied by 5msec
counter ++;//increment the counter by 1 each time to trigger a set number of repeated pulses
  }

}
